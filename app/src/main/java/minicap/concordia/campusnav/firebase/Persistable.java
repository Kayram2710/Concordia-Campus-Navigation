package minicap.concordia.campusnav.firebase;

import android.util.Log;

import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;

import java.util.Map;

public interface Persistable {
    String getId();
    void setId(String id);
    void populateFieldsFromMap(Map<String, Object> data);

    //Used to save to Firestore
    default void save(){
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        String collectionName = this.getClass().getSimpleName();

        //Create if it does not exist
        if(this.getId() == null){
            db.collection(collectionName)
                    .add(this)
                    .addOnSuccessListener(documentReference -> {
                        this.setId(documentReference.getId()); //Sets the ID generated by Firebase
                        db.collection(collectionName)
                                .document(this.getId())
                                .set(this)
                                .addOnSuccessListener(aVoid -> Log.d("Firestore", collectionName + " saved successfully with ID: " + this.getId()));
                    }).addOnFailureListener(e -> Log.e("Firestore", "Error Saving " + collectionName));
        }else{
            //Changes Record if it already exists
            db.collection(collectionName)
                    .document(getId())
                    .set(this)
                    .addOnSuccessListener(aVoid -> Log.d("Firestore",collectionName + " Saved Successfully"))
                    .addOnFailureListener(e -> Log.e("Firestore", "Error Saving " + collectionName));
        }
    }

    default void fetch(OnSuccessListener<Void> onSuccessListener){
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        String collectionName = this.getClass().getSimpleName();
        if(this.getId() == null){
            Log.e("Firestore", "Cannot fetch object without an ID.");
            return;
        }
        db.collection(collectionName)
                .document(this.getId())
                .get()
                .addOnSuccessListener(documentSnapshot -> {
                    if(documentSnapshot.exists()){
                        Map<String, Object> data = documentSnapshot.getData();
                        populateFieldsFromMap(data);
                        Log.d("Firestore", collectionName + " fetched successfully.");
                        onSuccessListener.onSuccess(null);
                    }else{
                        Log.e("Firestore", collectionName + " not found.");
                    }
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "Error fetching " + collectionName, e);
                });
    }

    default void fetch(String fieldName, Object fieldValue, OnSuccessListener<Void> onSuccessListener)  {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        String collectionName = this.getClass().getSimpleName();

        // Perform query to search for document based on the field
        db.collection(collectionName)
                .whereEqualTo(fieldName, fieldValue)  // Search by the field
                .get()
                .addOnSuccessListener(querySnapshot -> {
                    if (!querySnapshot.isEmpty()) {
                        DocumentSnapshot documentSnapshot = querySnapshot.getDocuments().get(0); // Get the first matching document
                        this.setId(documentSnapshot.getId());
                        populateFieldsFromMap(documentSnapshot.getData());
                        Log.d("Firestore", collectionName + " fetched successfully.");
                        onSuccessListener.onSuccess(null);
                    } else {
                        Log.e("Firestore", collectionName + " with " + fieldName + " = " + fieldValue + " not found.");
                    }
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "Error fetching " + collectionName, e);
                });
    }
}
